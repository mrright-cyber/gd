# !/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import datetime
import os
import json
import re
import time
from random import sample
import httpx
from telethon import events
from .. import jdbot, user
from ..bot.utils import get_cks
from urllib.parse import unquote
    
@user.on(events.NewMessage(pattern=r'^jf', outgoing=True))
async def getyj(event):
    try:
        msg_text= event.raw_text.split(' ')
        if isinstance(msg_text, list) and len(msg_text) == 2:
            text = msg_text[-1]
        else:
            text = None
            
        if text==None:
            await event.edit('ËØ∑ÊåáÂÆöË¶ÅÊü•ËØ¢ÁöÑË¥¶Âè∑,Ê†ºÂºè: jf ckÊï∞')
            return    
        else:        
            await event.edit("ÂºÄÂßãÊü•ËØ¢")
        
        #ËΩΩÂÖ•ËÆæÂÆö        
        waitsec=0
        issetconfig=False
        
        if os.path.exists("/ql/data/config/auth.json"):
            configpath="/ql/data/"
            ckfile="/ql/data/config/auth.json"
            
        if os.path.exists("/ql/config/auth.json"):
            configpath="/ql/"
            ckfile="/ql/config/auth.json"
            
        if os.path.exists("/jd/config/config.sh"):
            configpath="/jd/"
            ckfile=""
        
        if ckfile=="":
            await event.edit('‰∏çÊîØÊåÅV4ÁéØÂ¢ÉÔºåÈÄÄÂá∫...')
            return
            
        try:
            f = open(configpath+"config/ccbotSetting.json", "r+", encoding='utf-8')
            ccbotSetting = json.loads(f.read())
            f.close()
            for key in ccbotSetting:
                if key=="jfÂëΩ‰ª§ÈÖçÁΩÆ":
                    issetconfig=True
        except Exception as e:
            await event.edit(f'ËΩΩÂÖ•ccbotSetting.jsonÂá∫Èîô,ËØ∑Ê£ÄÊü•ÂÜÖÂÆπ!\n'+str(e))
            return
            
        if not issetconfig:
            await event.edit(f'ËΩΩÂÖ•ccbotSetting.jsonÊàêÂäüÔºå‰ΩÜÊòØÁº∫Â∞ëÁõ∏Â∫îÁöÑÈÖçÁΩÆ,ËØ∑Ê£ÄÊü•!')
            return
            
        try:
            for key in ccbotSetting["jfÂëΩ‰ª§ÈÖçÁΩÆ"]:                
                if key=="Â§öÂ∞ëÁßíÂêéËá™Âä®Âà†Èô§":
                    waitsec=int(ccbotSetting["jfÂëΩ‰ª§ÈÖçÁΩÆ"][key]) 
        except Exception as e:
            await event.edit(f'ËΩΩÂÖ•ccbotSetting.jsonÁöÑbdÂëΩ‰ª§ÈÖçÁΩÆÂÜÖÂÆπÂá∫Èîô,ËØ∑Ê£ÄÊü•!\n'+str(e))
            return
                
        num = int(text)
        info = f'**„ÄêË¥¶Âè∑üÜî{num}„Äëüíπ‰Ω£ÈáëÊî∂ÂÖ•Ôºö**\n'
        
        cookies = get_cks(ckfile)
        if num > len(cookies):
            info += f'Êü•ËØ¢Â§±Ë¥•ÔºåÊÇ®ÂÖ±Êúâ{len(cookies)}‰∏™Ë¥¶Âè∑'
        else:
            jfck = cookies[num - 1]
            pin = re.findall(r'(pt_pin=([^; ]+)(?=;?))',jfck)[0][1]
            if re.search('%', pin):
                pin = unquote(pin, 'utf-8')
                
            start = datetime.datetime.now().strftime('%Y-%m-%d %H:%M')
            info = f'**„ÄêË¥¶Âè∑üÜî{pin}„Äëüíπ‰Ω£ÈáëÊî∂ÂÖ•Ôºö**\n'  
            info += f'„ÄêÊà™Ê≠¢Âà∞{start}„Äë\n' 
            jfdata, get_ztmy, get_7my, get_30my = await asyncio.gather(
                get_fl(jfck),
                get_fls(jfck, 1),
                get_fls(jfck, 7),
                get_fls(jfck, 30)
            )
            if jfdata['code'] == 200 and get_ztmy['code'] == 200 and get_7my['code'] == 200 and get_30my['code'] == 200:
                yj = 0
                count = 0
                keys = ['ÂæÖ‰ªòÊ¨æ', 'ÂèñÊ∂à']
                for i in jfdata['data']:
                    if all(k not in str(i['validCodeMsg']) for k in keys) and float(i['estimateFee']) > 0:
                        yj += i['estimateFee']
                        count += 1                
                info += f'    „Äê‰ªäÊó•ËÆ¢Âçï„Äë{count}\n    „Äê‰ªäÊó•‰Ω£Èáë„Äë{round(yj, 2)}\n    „ÄêÊò®Êó•‰Ω£Èáë„Äë{get_ztmy["data"]}\n    „Äê‰∏ÉÊó•Êî∂ÂÖ•„Äë{get_7my["data"]}\n    „Äê30Êó•Êî∂ÂÖ•„Äë{get_30my["data"]}'
            elif 'no login' in jfdata['data']:
                info += 'Êü•ËØ¢Â§±Ë¥•ÔºåË¥¶Âè∑Â∑≤ËøáÊúü'
            elif 'no register' in jfdata['data']:
                info += 'Êü•ËØ¢Â§±Ë¥•ÔºåËøîÂà©Êú™ÊøÄÊ¥ª'
            else:
                info += f'Êü•ËØ¢Âá∫ÈîôÔºåÈîôËØØËØ¶ÊÉÖ\n{jfdata["data"], get_ztmy["data"], get_7my["data"], get_30my["data"]}'
                
        
        if waitsec==0:
            await event.edit(info)
        else:
            info=info+""
            await event.edit(info)        
            await asyncio.sleep(waitsec)
            await event.delete()
        
    except Exception as e:
        title = "„Äêüí•ÈîôËØØüí•„Äë"
        name = "Êñá‰ª∂ÂêçÔºö" + os.path.split(__file__)[-1].split(".")[0]
        function = "ÂáΩÊï∞ÂêçÔºö" + e.__traceback__.tb_frame.f_code.co_name
        details = "ÈîôËØØËØ¶ÊÉÖÔºöÁ¨¨ " + str(e.__traceback__.tb_lineno) + " Ë°å"
        await jdbot.send_message(chat_id, f"{title}\n\n{name}\n{function}\nÈîôËØØÂéüÂõ†Ôºö{str(e)}\n{details}")
        logger.error(f"ÈîôËØØ--->{str(e)}")


async def get_fl(cookie):
    try:
        dnow = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime('%Y-%m-%d %H:%M:%S')
        dtnow = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        body = {
            "funName": "listOrderSku",
            "unionId": "",
            "param": {
                "startTime": dnow,
                "endTime": dtnow,
                "orderStatus": 0,
                "optType": 1,
                "unionRole": 1
            },
            "page": {
                "pageNo": 1,
                "pageSize": 100
            }
        }
        url = f'https://api.m.jd.com/api?functionId=listOrderSku&_={dtnow}&appid=u&body={body}&loginType=2'
        headers = {
            'Host': 'api.m.jd.com',
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br',
            'Accept-Language': 'zh-cn',
            'Connection': 'keep-alive',
            'Content-Type': 'application/json',
            'cookie': cookie,
            'Referer': 'https://jingfenapp.jd.com',
            'User-Agent': await userAgent()
        }
        async with httpx.AsyncClient(verify=False) as session:
            res = await session.get(url, headers=headers)
        if res.status_code == 200 and res.json().get('code') == 200:
            jforder, estimateFee, validCodeMsg = [], [], []
            dnow = datetime.datetime.now().strftime('%Y-%m-%d')
            dnow_reg = re.compile(dnow)
            jforders = res.json()['result']
            for order in jforders:
                if re.search(dnow_reg, order['orderTime']):
                    jforder.append(order['orderId'])
                    estimateFee.append(order['estimateFee'])
                    validCodeMsg.append(order['validCodeMsg'])
            jflist = []
            mid = map(list, zip(jforder, estimateFee, validCodeMsg))
            for item in mid:
                jfdict = dict(zip(['jforder', 'estimateFee', 'validCodeMsg'], item))
                jflist.append(jfdict)
            return {'code': 200, 'data': jflist}
        else:
            return {'code': 400, 'data': str(res.json())}
    except Exception as e:
        return {'code': 400, 'data': e}


async def get_fls(cookie, day):
    try:
        startdate = (datetime.datetime.now() + datetime.timedelta(days=-day)).strftime("%Y-%m-%d")
        enddate = (datetime.datetime.now() + datetime.timedelta(days=-1)).strftime("%Y-%m-%d")
        body = {"funName": "querySpreadEffectData", "unionId": 2023952562, "param": {"startDate": startdate, "endDate": enddate}}
        url = f"https://api.m.jd.com/api?functionId=union_report&_={int(time.time() * 1000)}&appid=u&body={body}&loginType=2"
        headers = {
            'Host': 'api.m.jd.com',
            'Connection': 'keep-alive',
            'Cookie': cookie,
            'content-type': 'application/json',
            'Accept-Encoding': 'gzip,compress,br,deflate',
            'User-Agent': await userAgent(),
            'Referer': 'https://servicewechat.com/wxf463e50cd384beda/138/page-frame.html'
        }
        async with httpx.AsyncClient(verify=False) as session:
            res = await session.get(url, headers=headers, timeout=10)
        if res.status_code == 200:
            response = res.json()["result"]["spreadReportInfoSum"]["cosFee"]
            return {'code': 200, 'data': response}
        else:
            return {'code': 400, 'data': str(res.json())}
    except Exception as e:
        return {'code': 400, 'data': e}


async def userAgent():
    """
    ÈöèÊú∫ÁîüÊàê‰∏Ä‰∏™UA
    """
    uuid = ''.join(sample('123456789abcdef123456789abcdef123456789abcdef123456789abcdef', 40))
    addressid = ''.join(sample('1234567898647', 10))
    iosVer = ''.join(sample(["14.5.1", "14.4", "14.3", "14.2", "14.1", "14.0.1", "13.7", "13.1.2", "13.1.1"], 1))
    iosV = iosVer.replace('.', '_')
    iPhone = ''.join(sample(["8", "9", "10", "11", "12", "13"], 1))
    ADID = ''.join(sample('0987654321ABCDEF', 8)) + '-' + ''.join(sample('0987654321ABCDEF', 4)) + '-' + ''.join(sample('0987654321ABCDEF', 4)) + '-' + ''.join(sample('0987654321ABCDEF', 4)) + '-' + ''.join(sample('0987654321ABCDEF', 12))
    return f'jdapp;iPhone;10.0.4;{iosVer};{uuid};network/wifi;ADID/{ADID};model/iPhone{iPhone},1;addressid/{addressid};appBuild/167707;jdSupportDarkMode/0;Mozilla/5.0 (iPhone; CPU iPhone OS {iosV} like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/null;supportJDSHWK/1'
